// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // 1. Instruction is A-instruction or C-instruciton?
        DMux(in=true, sel=instruction[15], a=instrIsA, b=instrIsC);

        // 2. Select the input to write into A-register:
        And(a=instrIsC, b=instruction[5], out=loadAfromAlu);
        Mux16(a=instruction, b=aluOut, sel=loadAfromAlu, out=outMuxA);

        // 3. A-register: write if destination is A-register or instruction is @xxx
        Or(a=instrIsA, b=loadAfromAlu, out=loadRegA);
        ARegister(in=outMuxA, load=loadRegA, out=outRegA, out[0..14]=addressM);

        // 4. Choose the input between A and M, according to a-bit (12):
        And(a=instrIsC, b=instruction[12], out=loadMuxD);
        Mux16(a=outRegA, b=inM, sel=loadMuxD, out=outMuxToAlu);

        // 5. D-register: write if destination is D-register (among others)
        And(a=instrIsC, b=instruction[4], out=loadRegD);
        DRegister(in=aluOut, load=loadRegD, out=outRegD);

        // 5. ALU:
        ALU(x=outRegD, y=outMuxToAlu, no=instruction[6], f=instruction[7], ny=instruction[8],
            zy=instruction[9], nx=instruction[10], zx=instruction[11], zr=aluZr, ng=aluNg,
            out=aluOut, out=outM);
        
        // 6. Form jump logic:
        DMux4Way(in=true, sel[0]=aluZr, sel[1]=aluNg, a=pos, b=zero, c=neg, d=False);
        Or(a=pos, b=zero, out=posOrZero);
        Or(a=neg, b=zero, out=negOrZero);
        Not(in=zero, out=nonzero);
        DMux8Way(in=true, sel[0..2]=instruction[0..2], a=nojump, b=jgt, c=jeq, d=jge,
                 e=jlt, f=jne, g=jle, h=jmp);
        //    Jump conditions:
        And(a=jgt, b=pos      , out=t1);
        And(a=jeq, b=zero     , out=t2);
        And(a=jge, b=posOrZero, out=t3);
        And(a=jlt, b=neg      , out=t4);
        And(a=jne, b=nonzero  , out=t5);
        And(a=jle, b=negOrZero, out=t6);
        And(a=jmp, b=true     , out=t7);
        Or8Way(in[0]=false, in[1]=t1, in[2]=t2, in[3]=t3, in[4]=t4, in[5]=t5, in[6]=t6, in[7]=t7, out=jumpReady);
        And(a=jumpReady, b=instrIsC, out=jump);
        Not(in=jump, out=increment);

        // PC:
        PC(in=outRegA, load=jump, inc=increment, reset=reset, out[0..14]=pc);

        // 9. Memory write bit:
        And(a=instrIsC, b=instruction[3], out=writeM);
}
