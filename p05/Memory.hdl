// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

/**
Note that:

  < 4000 --- 0000 0000 0000 0000
  < 4000 --- 0001 0000 0000 0000
    4000 --  0100 0000 0000 0000 
    6000 --  0110 0000 0000 0000 

Looking at the first quartet, we see that:

    abcd     abcd
  < 4000 --- 0000 
  < 4000 --- 0001 
    4000 --  0100 
    6000 --  0110 

We see that only bits "b" and "c" are significant, or:
    00, 01 - RAM
    10     - SCR
    11     - KBD

That's how the Mux/Dmux logic works here.

Note that this architecture relies on the assumption that
a load signal will never be on 1 when addressing the keyboard;
this allows to use DMux instead of DMux 4 way in Step 1.
There's no sense in setting load to HIGH for keyboard, because
we never write anything to the Keyboard chip.
*/


CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
        // 1. Determine which part (RAM or Screen) needs to get the load signal:
        DMux(in=load, sel=address[14], a=ramLoad, b=scrLoad);
        // DMux4Way(in=load, sel=address[13..14], a=t1, b=t2, c=scrLoad, d=t4);
        // Or(a=t1, b=t2, out=ramLoad);
        // 2. Form parts:
        RAM16K(in=in, address=address[0..13], load=ramLoad, out=ramOut);
        Screen(in=in, address=address[0..12], load=scrLoad, out=scrOut);
        Keyboard(out=kbdOut);
        // 3. Select output:
        Mux4Way16(a=ramOut, b=ramOut, c=scrOut, d=kbdOut, sel=address[13..14], out=out);
}
